/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type I24Input = { underlying: BigNumberish };

export type I24Output = { underlying: number };

export type U128Input = { upper: BigNumberish; lower: BigNumberish };

export type U128Output = { upper: BN; lower: BN };

export type Q64x64Input = { value: U128Input };

export type Q64x64Output = { value: U128Output };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface AmmAbiInterface extends Interface {
  functions: {
    burn: FunctionFragment;
    collect: FunctionFragment;
    collect_protocol_fee: FunctionFragment;
    get_price_and_nearest_tick: FunctionFragment;
    get_protocol_fees: FunctionFragment;
    get_reserves: FunctionFragment;
    init: FunctionFragment;
    mint: FunctionFragment;
    quote_amount_in: FunctionFragment;
    set_price: FunctionFragment;
    swap: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [IdentityInput, I24Input, I24Input, U128Input]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "collect",
    values: [I24Input, I24Input]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "collect_protocol_fee",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_price_and_nearest_tick",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_protocol_fees",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_reserves",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      ContractIdInput,
      ContractIdInput,
      BigNumberish,
      Q64x64Input,
      BigNumberish
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      I24Input,
      I24Input,
      I24Input,
      I24Input,
      BigNumberish,
      BigNumberish,
      IdentityInput
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "quote_amount_in",
    values: [boolean, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_price",
    values: [Q64x64Input]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "swap",
    values: [Q64x64Input, IdentityInput]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "burn", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "collect",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "collect_protocol_fee",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_price_and_nearest_tick",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_protocol_fees",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_reserves",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "init", data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: "mint", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "quote_amount_in",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_price",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "swap", data: BytesLike): DecodedValue;
}

export class AmmAbi extends Contract {
  interface: AmmAbiInterface;
  functions: {
    burn: InvokeFunction<
      [
        recipient: IdentityInput,
        lower: I24Input,
        upper: I24Input,
        liquidity_amount: U128Input
      ],
      [BN, BN, BN, BN]
    >;

    collect: InvokeFunction<
      [tick_lower: I24Input, tick_upper: I24Input],
      [BN, BN]
    >;

    collect_protocol_fee: InvokeFunction<[], [BN, BN]>;

    get_price_and_nearest_tick: InvokeFunction<[], [Q64x64Output, I24Output]>;

    get_protocol_fees: InvokeFunction<[], [BN, BN]>;

    get_reserves: InvokeFunction<[], [BN, BN]>;

    init: InvokeFunction<
      [
        first_token: ContractIdInput,
        second_token: ContractIdInput,
        swap_fee: BigNumberish,
        sqrt_price: Q64x64Input,
        tick_spacing: BigNumberish
      ],
      void
    >;

    mint: InvokeFunction<
      [
        lower_old: I24Input,
        lower: I24Input,
        upper_old: I24Input,
        upper: I24Input,
        amount0_desired: BigNumberish,
        amount1_desired: BigNumberish,
        recipient: IdentityInput
      ],
      U128Output
    >;

    quote_amount_in: InvokeFunction<
      [token_zero_to_one: boolean, amount_out: BigNumberish],
      BN
    >;

    set_price: InvokeFunction<[price: Q64x64Input], void>;

    swap: InvokeFunction<
      [sqrt_price_limit: Q64x64Input, recipient: IdentityInput],
      BN
    >;
  };
}
